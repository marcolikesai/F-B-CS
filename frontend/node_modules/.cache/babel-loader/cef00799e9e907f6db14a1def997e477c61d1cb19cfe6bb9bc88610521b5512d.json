{"ast":null,"code":"import axios from'axios';import mockData from'../data/mockData.json';const API_BASE_URL=process.env.REACT_APP_API_BASE_URL||(process.env.NODE_ENV==='production'?'/api':'http://localhost:5001');const api=axios.create({baseURL:API_BASE_URL,timeout:5000,// Reduced timeout for faster fallback\nheaders:{'Content-Type':'application/json'}});// Use static data by default in production for faster loading\nconst useStaticData=process.env.NODE_ENV==='production';// Helper to get data with instant static fallback in production\nconst getDataWithFallback=async(endpoint,fallbackData)=>{if(useStaticData){// In production, use static data immediately for fast loading\nreturn{data:fallbackData};}try{// In development, try backend first\nconst response=await api.get(endpoint);return response;}catch(error){console.log(\"Backend not available for \".concat(endpoint,\", using static data\"));return{data:fallbackData};}};const apiService={// Analysis endpoints\ngetAnalysisOverview:()=>getDataWithFallback('/api/analysis/overview',mockData.analysis_overview),getEventPerformance:()=>getDataWithFallback('/api/analysis/event-performance',mockData.event_performance),getStandPerformance:()=>getDataWithFallback('/api/analysis/stand-performance',mockData.stand_performance),// Predictions\ngetMarch5Predictions:()=>getDataWithFallback('/api/predictions/march5',mockData.march5_predictions),// Staffing\ngetStaffingRecommendations:()=>getDataWithFallback('/api/staffing/recommendations',mockData.staffing_recommendations),// Historical data\ngetHistoricalData:()=>getDataWithFallback('/api/historical-data',mockData.historical_data),// Risk assessment\ngetRiskAssessment:()=>getDataWithFallback('/api/risk-assessment',mockData.risk_assessment)};export default apiService;export{apiService};","map":{"version":3,"names":["axios","mockData","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","NODE_ENV","api","create","baseURL","timeout","headers","useStaticData","getDataWithFallback","endpoint","fallbackData","data","response","get","error","console","log","concat","apiService","getAnalysisOverview","analysis_overview","getEventPerformance","event_performance","getStandPerformance","stand_performance","getMarch5Predictions","march5_predictions","getStaffingRecommendations","staffing_recommendations","getHistoricalData","historical_data","getRiskAssessment","risk_assessment"],"sources":["/Users/marcomontenegro/dataanalysis/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport mockData from '../data/mockData.json';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL \n  || (process.env.NODE_ENV === 'production' \n    ? '/api'\n    : 'http://localhost:5001');\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 5000, // Reduced timeout for faster fallback\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Use static data by default in production for faster loading\nconst useStaticData = process.env.NODE_ENV === 'production';\n\n// Helper to get data with instant static fallback in production\nconst getDataWithFallback = async (endpoint, fallbackData) => {\n  if (useStaticData) {\n    // In production, use static data immediately for fast loading\n    return { data: fallbackData };\n  }\n  \n  try {\n    // In development, try backend first\n    const response = await api.get(endpoint);\n    return response;\n  } catch (error) {\n    console.log(`Backend not available for ${endpoint}, using static data`);\n    return { data: fallbackData };\n  }\n};\n\nconst apiService = {\n  // Analysis endpoints\n  getAnalysisOverview: () => getDataWithFallback('/api/analysis/overview', mockData.analysis_overview),\n  \n  getEventPerformance: () => getDataWithFallback('/api/analysis/event-performance', mockData.event_performance),\n  \n  getStandPerformance: () => getDataWithFallback('/api/analysis/stand-performance', mockData.stand_performance),\n  \n  // Predictions\n  getMarch5Predictions: () => getDataWithFallback('/api/predictions/march5', mockData.march5_predictions),\n  \n  // Staffing\n  getStaffingRecommendations: () => getDataWithFallback('/api/staffing/recommendations', mockData.staffing_recommendations),\n  \n  // Historical data\n  getHistoricalData: () => getDataWithFallback('/api/historical-data', mockData.historical_data),\n  \n  // Risk assessment\n  getRiskAssessment: () => getDataWithFallback('/api/risk-assessment', mockData.risk_assessment),\n};\n\nexport default apiService;\nexport { apiService }; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,QAAQ,KAAM,uBAAuB,CAE5C,KAAM,CAAAC,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,GACjDF,OAAO,CAACC,GAAG,CAACE,QAAQ,GAAK,YAAY,CACrC,MAAM,CACN,uBAAuB,CAAC,CAE9B,KAAM,CAAAC,GAAG,CAAGP,KAAK,CAACQ,MAAM,CAAC,CACvBC,OAAO,CAAEP,YAAY,CACrBQ,OAAO,CAAE,IAAI,CAAE;AACfC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,aAAa,CAAGT,OAAO,CAACC,GAAG,CAACE,QAAQ,GAAK,YAAY,CAE3D;AACA,KAAM,CAAAO,mBAAmB,CAAG,KAAAA,CAAOC,QAAQ,CAAEC,YAAY,GAAK,CAC5D,GAAIH,aAAa,CAAE,CACjB;AACA,MAAO,CAAEI,IAAI,CAAED,YAAa,CAAC,CAC/B,CAEA,GAAI,CACF;AACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAV,GAAG,CAACW,GAAG,CAACJ,QAAQ,CAAC,CACxC,MAAO,CAAAG,QAAQ,CACjB,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,8BAAAC,MAAA,CAA8BR,QAAQ,uBAAqB,CAAC,CACvE,MAAO,CAAEE,IAAI,CAAED,YAAa,CAAC,CAC/B,CACF,CAAC,CAED,KAAM,CAAAQ,UAAU,CAAG,CACjB;AACAC,mBAAmB,CAAEA,CAAA,GAAMX,mBAAmB,CAAC,wBAAwB,CAAEZ,QAAQ,CAACwB,iBAAiB,CAAC,CAEpGC,mBAAmB,CAAEA,CAAA,GAAMb,mBAAmB,CAAC,iCAAiC,CAAEZ,QAAQ,CAAC0B,iBAAiB,CAAC,CAE7GC,mBAAmB,CAAEA,CAAA,GAAMf,mBAAmB,CAAC,iCAAiC,CAAEZ,QAAQ,CAAC4B,iBAAiB,CAAC,CAE7G;AACAC,oBAAoB,CAAEA,CAAA,GAAMjB,mBAAmB,CAAC,yBAAyB,CAAEZ,QAAQ,CAAC8B,kBAAkB,CAAC,CAEvG;AACAC,0BAA0B,CAAEA,CAAA,GAAMnB,mBAAmB,CAAC,+BAA+B,CAAEZ,QAAQ,CAACgC,wBAAwB,CAAC,CAEzH;AACAC,iBAAiB,CAAEA,CAAA,GAAMrB,mBAAmB,CAAC,sBAAsB,CAAEZ,QAAQ,CAACkC,eAAe,CAAC,CAE9F;AACAC,iBAAiB,CAAEA,CAAA,GAAMvB,mBAAmB,CAAC,sBAAsB,CAAEZ,QAAQ,CAACoC,eAAe,CAC/F,CAAC,CAED,cAAe,CAAAd,UAAU,CACzB,OAASA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}