{"ast":null,"code":"import axios from 'axios';\nimport mockData from '../data/mockData.json';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || (process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5001');\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 5000,\n  // Reduced timeout for faster fallback\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Use static data by default in production for faster loading\nconst useStaticData = process.env.NODE_ENV === 'production';\n\n// Helper to get data with instant static fallback in production\nconst getDataWithFallback = async (endpoint, fallbackData) => {\n  if (useStaticData) {\n    // In production, use static data immediately for fast loading\n    return {\n      data: fallbackData\n    };\n  }\n  try {\n    // In development, try backend first\n    const response = await api.get(endpoint);\n    return response;\n  } catch (error) {\n    console.log(`Backend not available for ${endpoint}, using static data`);\n    return {\n      data: fallbackData\n    };\n  }\n};\nconst apiService = {\n  // Analysis endpoints\n  getAnalysisOverview: () => getDataWithFallback('/api/analysis/overview', mockData.analysis_overview),\n  getEventPerformance: () => getDataWithFallback('/api/analysis/event-performance', mockData.event_performance),\n  getStandPerformance: () => getDataWithFallback('/api/analysis/stand-performance', mockData.stand_performance),\n  // Predictions\n  getMarch5Predictions: () => getDataWithFallback('/api/predictions/march5', mockData.march5_predictions),\n  // Staffing\n  getStaffingRecommendations: () => getDataWithFallback('/api/staffing/recommendations', mockData.staffing_recommendations),\n  // Historical data\n  getHistoricalData: () => getDataWithFallback('/api/historical-data', mockData.historical_data),\n  // Risk assessment\n  getRiskAssessment: () => getDataWithFallback('/api/risk-assessment', mockData.risk_assessment)\n};\nexport default apiService;\nexport { apiService };","map":{"version":3,"names":["axios","mockData","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","NODE_ENV","api","create","baseURL","timeout","headers","useStaticData","getDataWithFallback","endpoint","fallbackData","data","response","get","error","console","log","apiService","getAnalysisOverview","analysis_overview","getEventPerformance","event_performance","getStandPerformance","stand_performance","getMarch5Predictions","march5_predictions","getStaffingRecommendations","staffing_recommendations","getHistoricalData","historical_data","getRiskAssessment","risk_assessment"],"sources":["/Users/marcomontenegro/dataanalysis/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport mockData from '../data/mockData.json';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL \n  || (process.env.NODE_ENV === 'production' \n    ? '/api'\n    : 'http://localhost:5001');\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 5000, // Reduced timeout for faster fallback\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Use static data by default in production for faster loading\nconst useStaticData = process.env.NODE_ENV === 'production';\n\n// Helper to get data with instant static fallback in production\nconst getDataWithFallback = async (endpoint, fallbackData) => {\n  if (useStaticData) {\n    // In production, use static data immediately for fast loading\n    return { data: fallbackData };\n  }\n  \n  try {\n    // In development, try backend first\n    const response = await api.get(endpoint);\n    return response;\n  } catch (error) {\n    console.log(`Backend not available for ${endpoint}, using static data`);\n    return { data: fallbackData };\n  }\n};\n\nconst apiService = {\n  // Analysis endpoints\n  getAnalysisOverview: () => getDataWithFallback('/api/analysis/overview', mockData.analysis_overview),\n  \n  getEventPerformance: () => getDataWithFallback('/api/analysis/event-performance', mockData.event_performance),\n  \n  getStandPerformance: () => getDataWithFallback('/api/analysis/stand-performance', mockData.stand_performance),\n  \n  // Predictions\n  getMarch5Predictions: () => getDataWithFallback('/api/predictions/march5', mockData.march5_predictions),\n  \n  // Staffing\n  getStaffingRecommendations: () => getDataWithFallback('/api/staffing/recommendations', mockData.staffing_recommendations),\n  \n  // Historical data\n  getHistoricalData: () => getDataWithFallback('/api/historical-data', mockData.historical_data),\n  \n  // Risk assessment\n  getRiskAssessment: () => getDataWithFallback('/api/risk-assessment', mockData.risk_assessment),\n};\n\nexport default apiService;\nexport { apiService }; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,uBAAuB;AAE5C,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,KACjDF,OAAO,CAACC,GAAG,CAACE,QAAQ,KAAK,YAAY,GACrC,MAAM,GACN,uBAAuB,CAAC;AAE9B,MAAMC,GAAG,GAAGP,KAAK,CAACQ,MAAM,CAAC;EACvBC,OAAO,EAAEP,YAAY;EACrBQ,OAAO,EAAE,IAAI;EAAE;EACfC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,aAAa,GAAGT,OAAO,CAACC,GAAG,CAACE,QAAQ,KAAK,YAAY;;AAE3D;AACA,MAAMO,mBAAmB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,YAAY,KAAK;EAC5D,IAAIH,aAAa,EAAE;IACjB;IACA,OAAO;MAAEI,IAAI,EAAED;IAAa,CAAC;EAC/B;EAEA,IAAI;IACF;IACA,MAAME,QAAQ,GAAG,MAAMV,GAAG,CAACW,GAAG,CAACJ,QAAQ,CAAC;IACxC,OAAOG,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,6BAA6BP,QAAQ,qBAAqB,CAAC;IACvE,OAAO;MAAEE,IAAI,EAAED;IAAa,CAAC;EAC/B;AACF,CAAC;AAED,MAAMO,UAAU,GAAG;EACjB;EACAC,mBAAmB,EAAEA,CAAA,KAAMV,mBAAmB,CAAC,wBAAwB,EAAEZ,QAAQ,CAACuB,iBAAiB,CAAC;EAEpGC,mBAAmB,EAAEA,CAAA,KAAMZ,mBAAmB,CAAC,iCAAiC,EAAEZ,QAAQ,CAACyB,iBAAiB,CAAC;EAE7GC,mBAAmB,EAAEA,CAAA,KAAMd,mBAAmB,CAAC,iCAAiC,EAAEZ,QAAQ,CAAC2B,iBAAiB,CAAC;EAE7G;EACAC,oBAAoB,EAAEA,CAAA,KAAMhB,mBAAmB,CAAC,yBAAyB,EAAEZ,QAAQ,CAAC6B,kBAAkB,CAAC;EAEvG;EACAC,0BAA0B,EAAEA,CAAA,KAAMlB,mBAAmB,CAAC,+BAA+B,EAAEZ,QAAQ,CAAC+B,wBAAwB,CAAC;EAEzH;EACAC,iBAAiB,EAAEA,CAAA,KAAMpB,mBAAmB,CAAC,sBAAsB,EAAEZ,QAAQ,CAACiC,eAAe,CAAC;EAE9F;EACAC,iBAAiB,EAAEA,CAAA,KAAMtB,mBAAmB,CAAC,sBAAsB,EAAEZ,QAAQ,CAACmC,eAAe;AAC/F,CAAC;AAED,eAAed,UAAU;AACzB,SAASA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}