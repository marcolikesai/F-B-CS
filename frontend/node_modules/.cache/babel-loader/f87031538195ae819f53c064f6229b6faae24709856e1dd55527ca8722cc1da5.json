{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/marcomontenegro/dataanalysis/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9;import React from'react';import styled from'styled-components';import Card from'../components/shared/Card';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PageContainer=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  max-width: 1000px;\\n  margin: 0 auto;\\n\"])));const PageHeader=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  margin-bottom: 32px;\\n\"])));const PageTitle=styled.h1(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  font-size: 2rem;\\n  font-weight: 700;\\n  color: #1e293b;\\n  margin: 0 0 8px 0;\\n\"])));const PageSubtitle=styled.p(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  font-size: 1rem;\\n  color: #64748b;\\n  margin: 0;\\n\"])));const Section=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  margin-bottom: 24px;\\n\"])));const SectionTitle=styled.h2(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  font-size: 1.25rem;\\n  font-weight: 700;\\n  color: #111827;\\n  margin: 0 0 8px 0;\\n\"])));const Paragraph=styled.p(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n  color: #374151;\\n  line-height: 1.6;\\n\"])));const List=styled.ul(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n  margin: 0 0 0 18px;\\n  color: #374151;\\n\"])));const CodeBlock=styled.pre(_templateObject9||(_templateObject9=_taggedTemplateLiteral([\"\\n  background: #0b1020;\\n  color: #e5e7eb;\\n  border-radius: 8px;\\n  padding: 14px;\\n  overflow-x: auto;\\n  font-size: 0.9rem;\\n\"])));const Methods=()=>{return/*#__PURE__*/_jsxs(PageContainer,{children:[/*#__PURE__*/_jsxs(PageHeader,{children:[/*#__PURE__*/_jsx(PageTitle,{children:\"Methods and Technical Approach\"}),/*#__PURE__*/_jsx(PageSubtitle,{children:\"End-to-end methodology for demand forecasting, staffing optimization, and operational insights\"})]}),/*#__PURE__*/_jsx(Section,{children:/*#__PURE__*/_jsxs(Card,{title:\"Data Sources and Preparation\",subtitle:\"Excel ingestion, cleansing, and feature engineering\",children:[/*#__PURE__*/_jsx(Paragraph,{children:\"We ingest three worksheets from the provided Excel file and normalize temporal fields. The unified dataset is created by joining event characteristics to event-level POS metrics. Key derived fields include day-of-week, month, local hour, weekend indicator, and per-capita metrics.\"}),/*#__PURE__*/_jsxs(List,{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Sheets: Event Characteristics, Event POS, Stand POS\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Temporal normalization: ISO date parsing, hour extraction from event time\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Joins: inner join on venue and event date (event granularity)\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Per-capita metrics: transactions per attendee, sales per attendee, sales per transaction\"})]}),/*#__PURE__*/_jsx(CodeBlock,{children:\"# Core transforms (Python/pandas)\\nevents['DayOfWeek'] = events['Calendar Date'].dt.day_name()\\nevents['Month'] = events['Calendar Date'].dt.month\\nevents['Hour'] = pd.to_datetime(events['Event Time'], format='%H:%M:%S').dt.hour\\nevents['IsWeekend'] = events['DayOfWeek'].isin(['Saturday', 'Sunday'])\\ncombined = events.merge(event_pos, on=['Venue Name','Calendar Date'], how='inner')\\ncombined['Trans_Per_Attendee'] = combined['Transactions'] / combined['Total Attendance']\\ncombined['Sales_Per_Attendee'] = combined['Net Sales'] / combined['Total Attendance']\\ncombined['Sales_Per_Transaction'] = combined['Net Sales'] / combined['Transactions']\"})]})}),/*#__PURE__*/_jsx(Section,{children:/*#__PURE__*/_jsxs(Card,{title:\"Modeling Strategy\",subtitle:\"Targets, features, and model selection\",children:[/*#__PURE__*/_jsx(Paragraph,{children:\"We frame prediction as supervised regression with multiple targets at the event level. Categorical drivers are label-encoded and combined with temporal and attendance features. We benchmark three estimators and pick the best per-target based on hold-out R\\xB2.\"}),/*#__PURE__*/_jsxs(List,{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Targets: Transactions, Net Sales, Units, Total POS\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Features: Total Attendance, Event Type (encoded), Opponent (encoded), Day of Week (encoded), Month, Hour, IsWeekend\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Estimators: Linear Regression, Random Forest, Gradient Boosting\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Validation: 80/20 train/test split; R\\xB2 and qualitative residual review\"})]}),/*#__PURE__*/_jsx(CodeBlock,{children:\"# Feature matrix\\nevent_type = LabelEncoder().fit_transform(combined['EventTypeName'])\\nopponent = LabelEncoder().fit_transform(combined['Opponent'])\\ndow = LabelEncoder().fit_transform(combined['DayOfWeek'])\\nX = pd.DataFrame({\\n  'Total Attendance': combined['Total Attendance'],\\n  'EventType_Encoded': event_type,\\n  'Opponent_Encoded': opponent,\\n  'DayOfWeek_Encoded': dow,\\n  'Month': combined['Month'],\\n  'Hour': combined['Hour'],\\n  'IsWeekend': combined['IsWeekend'].astype(int)\\n})\"})]})}),/*#__PURE__*/_jsx(Section,{children:/*#__PURE__*/_jsxs(Card,{title:\"March 5 Forecasting\",subtitle:\"Constructing the feature vector and predictions\",children:[/*#__PURE__*/_jsx(Paragraph,{children:\"For March 5, 2023 (Sunday 2 PM ET, expected attendance 10,000), we construct a single event feature vector using encoded means and temporal context. Model outputs include predicted transactions, sales, units, and POS terminals, plus derived per-capita KPIs.\"}),/*#__PURE__*/_jsx(CodeBlock,{children:\"# March 5 feature vector\\nx = {\\n  'Total Attendance': 10000,\\n  'EventType_Encoded': average_NBA_code,\\n  'Opponent_Encoded': average_opponent_code,\\n  'DayOfWeek_Encoded': code_for_sunday,\\n  'Month': 3,\\n  'Hour': 14,\\n  'IsWeekend': 1\\n}\\n# y_pred = model.predict([x[col] for col in feature_order])\"})]})}),/*#__PURE__*/_jsx(Section,{children:/*#__PURE__*/_jsxs(Card,{title:\"Stand-Level Staffing\",subtitle:\"Allocation using historical share and service rates\",children:[/*#__PURE__*/_jsx(Paragraph,{children:\"We allocate predicted transactions across stand groups in proportion to their historical share, then size POS terminals using empirically observed transactions-per-POS efficiency by stand type. This yields both per-stand POS counts and total cashier counts.\"}),/*#__PURE__*/_jsxs(List,{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Share model: stand_share = stand_transactions / total_transactions\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Capacity: POS_needed = ceil(predicted_transactions_for_stand / avg_trans_per_pos)\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Outputs: per-stand POS, total POS, qualitative priority guidance\"})]})]})}),/*#__PURE__*/_jsx(Section,{children:/*#__PURE__*/_jsx(Card,{title:\"Risk, Assumptions, and Limitations\",subtitle:\"What to watch and how to mitigate\",children:/*#__PURE__*/_jsxs(List,{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Data drift between seasons and roster changes can shift per-capita behavior.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Static opponent encoding approximates opponent effect; richer context could improve this.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Weather and promotions are not modeled explicitly; consider adding exogenous regressors.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Mitigation: dynamic POS activation plan and real-time queue monitoring.\"})]})})}),/*#__PURE__*/_jsx(Section,{children:/*#__PURE__*/_jsxs(Card,{title:\"Performance and Deployment\",subtitle:\"Caching, fast API, and local dev\",children:[/*#__PURE__*/_jsx(Paragraph,{children:\"To ensure a responsive UI, we pre-compute analysis into a compact JSON cache and serve it via a lightweight Flask app. This avoids training or heavy aggregation at request time and makes local operation stable and fast.\"}),/*#__PURE__*/_jsx(CodeBlock,{children:\"# Generate cache once\\npython backend/cache_results.py\\n\\n# Serve cached API\\nython backend/app_fast.py  # bound to http://localhost:5001\\n\\n# Frontend dev server\\ncd frontend && npm start  # proxy configured for port 5001\"})]})})]});};export default Methods;","map":{"version":3,"names":["React","styled","Card","jsx","_jsx","jsxs","_jsxs","PageContainer","div","_templateObject","_taggedTemplateLiteral","PageHeader","_templateObject2","PageTitle","h1","_templateObject3","PageSubtitle","p","_templateObject4","Section","_templateObject5","SectionTitle","h2","_templateObject6","Paragraph","_templateObject7","List","ul","_templateObject8","CodeBlock","pre","_templateObject9","Methods","children","title","subtitle"],"sources":["/Users/marcomontenegro/dataanalysis/frontend/src/pages/Methods.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport Card from '../components/shared/Card';\n\nconst PageContainer = styled.div`\n  max-width: 1000px;\n  margin: 0 auto;\n`;\n\nconst PageHeader = styled.div`\n  margin-bottom: 32px;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: 2rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin: 0 0 8px 0;\n`;\n\nconst PageSubtitle = styled.p`\n  font-size: 1rem;\n  color: #64748b;\n  margin: 0;\n`;\n\nconst Section = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst SectionTitle = styled.h2`\n  font-size: 1.25rem;\n  font-weight: 700;\n  color: #111827;\n  margin: 0 0 8px 0;\n`;\n\nconst Paragraph = styled.p`\n  color: #374151;\n  line-height: 1.6;\n`;\n\nconst List = styled.ul`\n  margin: 0 0 0 18px;\n  color: #374151;\n`;\n\nconst CodeBlock = styled.pre`\n  background: #0b1020;\n  color: #e5e7eb;\n  border-radius: 8px;\n  padding: 14px;\n  overflow-x: auto;\n  font-size: 0.9rem;\n`;\n\nconst Methods = () => {\n  return (\n    <PageContainer>\n      <PageHeader>\n        <PageTitle>Methods and Technical Approach</PageTitle>\n        <PageSubtitle>\n          End-to-end methodology for demand forecasting, staffing optimization, and operational insights\n        </PageSubtitle>\n      </PageHeader>\n\n      <Section>\n        <Card title=\"Data Sources and Preparation\" subtitle=\"Excel ingestion, cleansing, and feature engineering\">\n          <Paragraph>\n            We ingest three worksheets from the provided Excel file and normalize temporal fields. The\n            unified dataset is created by joining event characteristics to event-level POS metrics. Key\n            derived fields include day-of-week, month, local hour, weekend indicator, and per-capita metrics.\n          </Paragraph>\n          <List>\n            <li>Sheets: Event Characteristics, Event POS, Stand POS</li>\n            <li>Temporal normalization: ISO date parsing, hour extraction from event time</li>\n            <li>Joins: inner join on venue and event date (event granularity)</li>\n            <li>Per-capita metrics: transactions per attendee, sales per attendee, sales per transaction</li>\n          </List>\n          <CodeBlock>{`# Core transforms (Python/pandas)\nevents['DayOfWeek'] = events['Calendar Date'].dt.day_name()\nevents['Month'] = events['Calendar Date'].dt.month\nevents['Hour'] = pd.to_datetime(events['Event Time'], format='%H:%M:%S').dt.hour\nevents['IsWeekend'] = events['DayOfWeek'].isin(['Saturday', 'Sunday'])\ncombined = events.merge(event_pos, on=['Venue Name','Calendar Date'], how='inner')\ncombined['Trans_Per_Attendee'] = combined['Transactions'] / combined['Total Attendance']\ncombined['Sales_Per_Attendee'] = combined['Net Sales'] / combined['Total Attendance']\ncombined['Sales_Per_Transaction'] = combined['Net Sales'] / combined['Transactions']`}</CodeBlock>\n        </Card>\n      </Section>\n\n      <Section>\n        <Card title=\"Modeling Strategy\" subtitle=\"Targets, features, and model selection\">\n          <Paragraph>\n            We frame prediction as supervised regression with multiple targets at the event level. Categorical\n            drivers are label-encoded and combined with temporal and attendance features. We benchmark three\n            estimators and pick the best per-target based on hold-out R².\n          </Paragraph>\n          <List>\n            <li>Targets: Transactions, Net Sales, Units, Total POS</li>\n            <li>Features: Total Attendance, Event Type (encoded), Opponent (encoded), Day of Week (encoded), Month, Hour, IsWeekend</li>\n            <li>Estimators: Linear Regression, Random Forest, Gradient Boosting</li>\n            <li>Validation: 80/20 train/test split; R² and qualitative residual review</li>\n          </List>\n          <CodeBlock>{`# Feature matrix\nevent_type = LabelEncoder().fit_transform(combined['EventTypeName'])\nopponent = LabelEncoder().fit_transform(combined['Opponent'])\ndow = LabelEncoder().fit_transform(combined['DayOfWeek'])\nX = pd.DataFrame({\n  'Total Attendance': combined['Total Attendance'],\n  'EventType_Encoded': event_type,\n  'Opponent_Encoded': opponent,\n  'DayOfWeek_Encoded': dow,\n  'Month': combined['Month'],\n  'Hour': combined['Hour'],\n  'IsWeekend': combined['IsWeekend'].astype(int)\n})`}</CodeBlock>\n        </Card>\n      </Section>\n\n      <Section>\n        <Card title=\"March 5 Forecasting\" subtitle=\"Constructing the feature vector and predictions\">\n          <Paragraph>\n            For March 5, 2023 (Sunday 2 PM ET, expected attendance 10,000), we construct a single event\n            feature vector using encoded means and temporal context. Model outputs include predicted\n            transactions, sales, units, and POS terminals, plus derived per-capita KPIs.\n          </Paragraph>\n          <CodeBlock>{`# March 5 feature vector\nx = {\n  'Total Attendance': 10000,\n  'EventType_Encoded': average_NBA_code,\n  'Opponent_Encoded': average_opponent_code,\n  'DayOfWeek_Encoded': code_for_sunday,\n  'Month': 3,\n  'Hour': 14,\n  'IsWeekend': 1\n}\n# y_pred = model.predict([x[col] for col in feature_order])`}</CodeBlock>\n        </Card>\n      </Section>\n\n      <Section>\n        <Card title=\"Stand-Level Staffing\" subtitle=\"Allocation using historical share and service rates\">\n          <Paragraph>\n            We allocate predicted transactions across stand groups in proportion to their historical share,\n            then size POS terminals using empirically observed transactions-per-POS efficiency by stand type.\n            This yields both per-stand POS counts and total cashier counts.\n          </Paragraph>\n          <List>\n            <li>Share model: stand_share = stand_transactions / total_transactions</li>\n            <li>Capacity: POS_needed = ceil(predicted_transactions_for_stand / avg_trans_per_pos)</li>\n            <li>Outputs: per-stand POS, total POS, qualitative priority guidance</li>\n          </List>\n        </Card>\n      </Section>\n\n      <Section>\n        <Card title=\"Risk, Assumptions, and Limitations\" subtitle=\"What to watch and how to mitigate\">\n          <List>\n            <li>Data drift between seasons and roster changes can shift per-capita behavior.</li>\n            <li>Static opponent encoding approximates opponent effect; richer context could improve this.</li>\n            <li>Weather and promotions are not modeled explicitly; consider adding exogenous regressors.</li>\n            <li>Mitigation: dynamic POS activation plan and real-time queue monitoring.</li>\n          </List>\n        </Card>\n      </Section>\n\n      <Section>\n        <Card title=\"Performance and Deployment\" subtitle=\"Caching, fast API, and local dev\">\n          <Paragraph>\n            To ensure a responsive UI, we pre-compute analysis into a compact JSON cache and serve it via a\n            lightweight Flask app. This avoids training or heavy aggregation at request time and makes local\n            operation stable and fast.\n          </Paragraph>\n          <CodeBlock>{`# Generate cache once\npython backend/cache_results.py\n\n# Serve cached API\nython backend/app_fast.py  # bound to http://localhost:5001\n\n# Frontend dev server\ncd frontend && npm start  # proxy configured for port 5001`}</CodeBlock>\n        </Card>\n      </Section>\n    </PageContainer>\n  );\n};\n\nexport default Methods; "],"mappings":"8SAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,MAAO,CAAAC,IAAI,KAAM,2BAA2B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE7C,KAAM,CAAAC,aAAa,CAAGN,MAAM,CAACO,GAAG,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,mDAG/B,CAED,KAAM,CAAAC,UAAU,CAAGV,MAAM,CAACO,GAAG,CAAAI,gBAAA,GAAAA,gBAAA,CAAAF,sBAAA,kCAE5B,CAED,KAAM,CAAAG,SAAS,CAAGZ,MAAM,CAACa,EAAE,CAAAC,gBAAA,GAAAA,gBAAA,CAAAL,sBAAA,4FAK1B,CAED,KAAM,CAAAM,YAAY,CAAGf,MAAM,CAACgB,CAAC,CAAAC,gBAAA,GAAAA,gBAAA,CAAAR,sBAAA,+DAI5B,CAED,KAAM,CAAAS,OAAO,CAAGlB,MAAM,CAACO,GAAG,CAAAY,gBAAA,GAAAA,gBAAA,CAAAV,sBAAA,kCAEzB,CAED,KAAM,CAAAW,YAAY,CAAGpB,MAAM,CAACqB,EAAE,CAAAC,gBAAA,GAAAA,gBAAA,CAAAb,sBAAA,+FAK7B,CAED,KAAM,CAAAc,SAAS,CAAGvB,MAAM,CAACgB,CAAC,CAAAQ,gBAAA,GAAAA,gBAAA,CAAAf,sBAAA,kDAGzB,CAED,KAAM,CAAAgB,IAAI,CAAGzB,MAAM,CAAC0B,EAAE,CAAAC,gBAAA,GAAAA,gBAAA,CAAAlB,sBAAA,oDAGrB,CAED,KAAM,CAAAmB,SAAS,CAAG5B,MAAM,CAAC6B,GAAG,CAAAC,gBAAA,GAAAA,gBAAA,CAAArB,sBAAA,yIAO3B,CAED,KAAM,CAAAsB,OAAO,CAAGA,CAAA,GAAM,CACpB,mBACE1B,KAAA,CAACC,aAAa,EAAA0B,QAAA,eACZ3B,KAAA,CAACK,UAAU,EAAAsB,QAAA,eACT7B,IAAA,CAACS,SAAS,EAAAoB,QAAA,CAAC,gCAA8B,CAAW,CAAC,cACrD7B,IAAA,CAACY,YAAY,EAAAiB,QAAA,CAAC,gGAEd,CAAc,CAAC,EACL,CAAC,cAEb7B,IAAA,CAACe,OAAO,EAAAc,QAAA,cACN3B,KAAA,CAACJ,IAAI,EAACgC,KAAK,CAAC,8BAA8B,CAACC,QAAQ,CAAC,qDAAqD,CAAAF,QAAA,eACvG7B,IAAA,CAACoB,SAAS,EAAAS,QAAA,CAAC,0RAIX,CAAW,CAAC,cACZ3B,KAAA,CAACoB,IAAI,EAAAO,QAAA,eACH7B,IAAA,OAAA6B,QAAA,CAAI,qDAAmD,CAAI,CAAC,cAC5D7B,IAAA,OAAA6B,QAAA,CAAI,2EAAyE,CAAI,CAAC,cAClF7B,IAAA,OAAA6B,QAAA,CAAI,+DAA6D,CAAI,CAAC,cACtE7B,IAAA,OAAA6B,QAAA,CAAI,0FAAwF,CAAI,CAAC,EAC7F,CAAC,cACP7B,IAAA,CAACyB,SAAS,EAAAI,QAAA,2oBAQ6E,CAAC,EACpF,CAAC,CACA,CAAC,cAEV7B,IAAA,CAACe,OAAO,EAAAc,QAAA,cACN3B,KAAA,CAACJ,IAAI,EAACgC,KAAK,CAAC,mBAAmB,CAACC,QAAQ,CAAC,wCAAwC,CAAAF,QAAA,eAC/E7B,IAAA,CAACoB,SAAS,EAAAS,QAAA,CAAC,sQAIX,CAAW,CAAC,cACZ3B,KAAA,CAACoB,IAAI,EAAAO,QAAA,eACH7B,IAAA,OAAA6B,QAAA,CAAI,oDAAkD,CAAI,CAAC,cAC3D7B,IAAA,OAAA6B,QAAA,CAAI,qHAAmH,CAAI,CAAC,cAC5H7B,IAAA,OAAA6B,QAAA,CAAI,iEAA+D,CAAI,CAAC,cACxE7B,IAAA,OAAA6B,QAAA,CAAI,2EAAsE,CAAI,CAAC,EAC3E,CAAC,cACP7B,IAAA,CAACyB,SAAS,EAAAI,QAAA,ifAYL,CAAC,EACF,CAAC,CACA,CAAC,cAEV7B,IAAA,CAACe,OAAO,EAAAc,QAAA,cACN3B,KAAA,CAACJ,IAAI,EAACgC,KAAK,CAAC,qBAAqB,CAACC,QAAQ,CAAC,iDAAiD,CAAAF,QAAA,eAC1F7B,IAAA,CAACoB,SAAS,EAAAS,QAAA,CAAC,mQAIX,CAAW,CAAC,cACZ7B,IAAA,CAACyB,SAAS,EAAAI,QAAA,kTAUoD,CAAC,EAC3D,CAAC,CACA,CAAC,cAEV7B,IAAA,CAACe,OAAO,EAAAc,QAAA,cACN3B,KAAA,CAACJ,IAAI,EAACgC,KAAK,CAAC,sBAAsB,CAACC,QAAQ,CAAC,qDAAqD,CAAAF,QAAA,eAC/F7B,IAAA,CAACoB,SAAS,EAAAS,QAAA,CAAC,mQAIX,CAAW,CAAC,cACZ3B,KAAA,CAACoB,IAAI,EAAAO,QAAA,eACH7B,IAAA,OAAA6B,QAAA,CAAI,oEAAkE,CAAI,CAAC,cAC3E7B,IAAA,OAAA6B,QAAA,CAAI,mFAAiF,CAAI,CAAC,cAC1F7B,IAAA,OAAA6B,QAAA,CAAI,kEAAgE,CAAI,CAAC,EACrE,CAAC,EACH,CAAC,CACA,CAAC,cAEV7B,IAAA,CAACe,OAAO,EAAAc,QAAA,cACN7B,IAAA,CAACF,IAAI,EAACgC,KAAK,CAAC,oCAAoC,CAACC,QAAQ,CAAC,mCAAmC,CAAAF,QAAA,cAC3F3B,KAAA,CAACoB,IAAI,EAAAO,QAAA,eACH7B,IAAA,OAAA6B,QAAA,CAAI,8EAA4E,CAAI,CAAC,cACrF7B,IAAA,OAAA6B,QAAA,CAAI,2FAAyF,CAAI,CAAC,cAClG7B,IAAA,OAAA6B,QAAA,CAAI,0FAAwF,CAAI,CAAC,cACjG7B,IAAA,OAAA6B,QAAA,CAAI,yEAAuE,CAAI,CAAC,EAC5E,CAAC,CACH,CAAC,CACA,CAAC,cAEV7B,IAAA,CAACe,OAAO,EAAAc,QAAA,cACN3B,KAAA,CAACJ,IAAI,EAACgC,KAAK,CAAC,4BAA4B,CAACC,QAAQ,CAAC,kCAAkC,CAAAF,QAAA,eAClF7B,IAAA,CAACoB,SAAS,EAAAS,QAAA,CAAC,6NAIX,CAAW,CAAC,cACZ7B,IAAA,CAACyB,SAAS,EAAAI,QAAA,kOAOmD,CAAC,EAC1D,CAAC,CACA,CAAC,EACG,CAAC,CAEpB,CAAC,CAED,cAAe,CAAAD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}